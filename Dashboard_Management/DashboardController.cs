using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;
using Google.Cloud.Firestore;
using Inventory_Managment_System.Reports_Management;

namespace Inventory_Managment_System.Dashboard
{
    public class DashboardController
    {
        private DashboardView view;
        private ApplicationManager mainForm;
        private ReportsModel reportsModel;
        private string IDtoken;

        public DashboardController(DashboardView view, ApplicationManager mainForm, FirestoreDb firestoreDb, ProductModel productModel,string IDtoken)
        {
            this.view = view;
            this.mainForm = mainForm;
            this.IDtoken = IDtoken;
            this.reportsModel = new ReportsModel(firestoreDb, productModel);

            // Attach event handlers to the events in the view
            view.ProductManagementButtonClicked += (sender, args) => OnProductManagementButtonClick();
            view.CheckoutButtonClicked += (sender, args) => OnCheckoutButtonClick();
            view.BackButtonClicked += (sender, args) => OnBackButtonClick();
            view.ReportsButtonClicked  += (sender, args) => OnReportsButtonClick();

            // Load and display inventory value and total sales
            InitializeAsync();
        }

        private async void InitializeAsync()
        {
            // Load and display inventory value and total sales
            await UpdateDashboard();
        }

        public void OnProductManagementButtonClick()
        {
            // Handle the product management button click event
            mainForm.InitiateProductManager(IDtoken);
        }

        public void OnReportsButtonClick()
        {

            mainForm.InitiateReportsView(IDtoken);
        }

        public void OnCheckoutButtonClick()
        {
            // Handle the checkout button click event
            mainForm.InitiateCheckout(IDtoken);
        }

        public void OnBackButtonClick()
        {
            // Handle the back button click event
            mainForm.InitiateLogin();
        }



        public async Task UpdateDashboard()
        {
            try
            {
                // Show the loading message
                view.ShowLoadingMessage(true);

                // Calculate the total sales and inventory value using the ReportsModel
                double totalInventoryValue = await reportsModel.CalculateTotalInventoryValue();
                double totalSales = await reportsModel.CalculateTotalSalesThisMonth();

                // Debug statements
                Console.WriteLine("Total Sales: " + totalSales);
                Console.WriteLine("Total Inventory Value: " + totalInventoryValue);

                // Update the view
                view.UpdateInventoryValue(totalInventoryValue);
                view.UpdateTotalSales(totalSales);

                // Call GetRunningLowProducts with your desired threshold
                int thresholdQuantity = 10; // Change this to your desired threshold
              
                var lowProducts = await reportsModel.GetRunningLowProducts(thresholdQuantity); // Get the list of low products

                // Update the LowProductsListView with the list of low products
                view.UpdateLowProductsListView(lowProducts);

                // Call other methods from reportsModel
                await reportsModel.CalculateSalesByDay();
                await reportsModel.CalculateBestSellers();
                await reportsModel.CalculateBestSellersByCashValue();

                // Update the view with the charts generated by reportsModel
                view.UpdateLineChartSales(await GetLineChartSeries()); // Change this line
                view.UpdatePieChartBestSellers(await GetPieChartSeries()); // Change this line
                view.UpdateBarChartBestSellers(await GetBarChartSeries()); // Change this line
            }
            catch (Exception ex)
            {
                // Handle exceptions and errors
                Console.WriteLine("An error occurred: " + ex.Message);
            }
            finally
            {
                // Hide the loading message when all tasks are done
                view.ShowLoadingMessage(false);
            }
        }


        public async Task<Series> GetLineChartSeries()
        {
            // Use the data obtained from CalculateSalesByDay
            double[] dailySales = await reportsModel.CalculateSalesByDay();

            // Create a series for the line chart
            Series series = new Series("Weekly Sales by Day");
            series.ChartType = SeriesChartType.Line;

            // Add data points to the series for each day
            for (int i = 0; i < dailySales.Length; i++)
            {
                series.Points.AddXY(DateTime.Now.AddDays(i).ToString("ddd"), dailySales[i]);
            }

            return series;
        }


        public async Task<Series> GetBarChartSeries()
        {
            // Use the data obtained from CalculateBestSellersByCashValue
            Dictionary<string, double> bestSellersByCashValue = await reportsModel.CalculateBestSellersByCashValue();

            // Create a series for the bar chart
            Series series = new Series("Top Sellers by Cash Value")
            {
                ChartType = SeriesChartType.Column
            };

            // Add data points to the series for each top seller by cash value
            foreach (var seller in bestSellersByCashValue)
            {
                series.Points.AddXY(seller.Key, seller.Value);
            }

            return series;
        }


        public async Task<Series> GetPieChartSeries()
        {
            // Use the data obtained from CalculateBestSellers
            Dictionary<string, int> bestSellers = await reportsModel.CalculateBestSellers();

            // Create a series for the pie chart
            Series series = new Series("Top 3 Sellers This Month")
            {
                ChartType = SeriesChartType.Pie
            };

            // Add data points to the series for each top seller
            foreach (var seller in bestSellers)
            {
                series.Points.AddXY(seller.Key, seller.Value);
            }

            return series;
        }



    }
}
